:=
	x := 35 //declaring and assigning at the same time using short declaration operator
		//cannot exist outside the function body

var
	var v1 = 56 	//var is a keyword and this can exist outside of the function body
			//declare the variable v1 and assign the value 56

	var v2 int	//variable v2 is of type int and assigned a value of ZERO of type int

	var s1 string = "Hello World!"
	var s2 string = `We can write like this "Hello World!"`	//it includes double quotes as it is

%T	//is used to print the type of the variable for e.g. var x = 67 fmt.Prinft("x is of type %T\n", x)
	//will print type as string

	//go is a static typed language

Primitive Data Types	-	Pre declared data types for the language
Composed Data Types	-	Aggregate Data Types a bunch of data of the same type

fmt
	//%x hex %v value %T type 
	//(%-fmt) pads spaces to right (%#fmt) alternate format, add leading ZERO's for octal
	//0x for %#x and 0X for %#X and supresses 0x for %#p
	//(0) - allways pad ZERO's rather than spaces

	Print, Printf, Println		//print any type of variable
	Sprint, Sprintf, Sprintln	//for strings
	Fprint, Fprintf, Fprintln	//File print

Create your own type
	type AnotherInt int
	var myvalue AnotherInt
	myvalue = 56
	fmt.Println(myvalue)
	fmt.Printf("myvalue type is %T\n", myvalue)

	var anotherValue int = 67
	anotherValue = myvalue	//This is not possible, because they are of different type

Conversion
	anoteherValue = int(myValue)

Numeric Types
	uint8		uint16		uint32		uint64
	int8		int16		int32		int64
					float32		float64
					unit		uint
					int 		int
									uintptr
	byte				rune
							complex64	complex128

runtime
	GOOS
	GOARCH

string
	are immutable, once assigned cannot be changed

numerics
	decimal binary hexadecimal

constants
	const(
		a = 42
		s = "hello"
	)

	const(
		a int = 42
		s string = "hello"
	)

iota
	pre declared identifier
	const(
		a=iota
		b
		c
	)
	then a becomes 0
	b becomes 2
	c becomes 2

for loop
	x := 10
	for x<100{
		fmt.Println(x)
		x = x + 1
	}

	for i:=0; i<100; i++{
		fmt.Println(i)
	}

	y:=20
	for {
		if y==524 {
			break
		}
		y = y + 1
	}

	for i,v := range s{
		fmt.Println(i, " - ", s[i])
	}

switch
	switch{
	}
	looks for all true cases

	switch c{
		case x, y, z, b:
			return true
	}

	switch f{
		case 1:
			fallthrough
		case 3:
			....
		case 9:
			fallthrough
	}

	when you use fallthrough it follows the fallthroughs, hence here it will execute cae 1, 9 etc.

array
	declaration :  var varname [arrsize]int

composite
	elements grouped of different types
	x := type{values}

slice
	allows you to group together values of same type
	x := []int{ 4, 6, 8, 2}

aggregate
	array or slice with values of same type


multidimensional array
	m := []string{ "zero", "one"}
	p := []string{ "two", "three"}
	x := [][]string{m, p}

map
	x:= map[string]int{}
struct

func
	func (r receiver) identifier(t1 type1, t2 type2,...) (rt return) { code }
	no argument function
	func noArgumentFunction(){
	}

	function with one argument
	func oneArgumentFunction(s string){
	}

	function with return value of type string
	func withReturnValue string (s string){
		return fmt.Sprint("Hello, ",s,". How are you?")
	}

	function with multiple return value of type return status of type int and string
	func withMultipleReturnValue (int, string) (s string){
		return 1, fmt.Sprint("Hello, ",s,". How are you?")
	}

	function with variable number of arguments
	func withVariableArguments(x ...int){
	}
	Here the type of x is []int
	at the calling point you call like 
	withVariableArguments(3,7,9,12,15,17)

unfurling a slice
	if the variadic function is
		func variadic(x ...int) int {
		}

	then
		varadic(3,4,5,6) - is valid
		varadic(3,4,5,6,"any_string") - is invalid

	if the variadic function is
		func variadic(s string, x ...int) int {
		}
	then
		varadic("any_string") - is valid and []int is nil
		varadic("any_string", 4,6,7,8) - is valid

defer
	Suppose there are two function's

	func first_function(){
	}

	func second_function(){
	}

	if we call them now in the following sequence
	first_function()
	second_function()
	the order of execution will be retained as it is

	But, if we defer one of them i.e. first_function(), then order is going to change as follows
	second_function()
	first_function()
	the above is a result of
	defer fisrt_function()
	second_function()
	at the calling point

method
	method is defined as
	func (s name_of_struct) processStruct(){
		print details........
	}

	type name_of_struct struct{
		field1 type1
		field2 type2
	}

	at the calling point
	obj := name_of_struct{
		field1 : value1,
		field2 : value2,
	}

	obj.processStruct()

interface
	If you have a method declared by an interface then you are of type interface
	first we declare two different structures
	type struct1 struct{
	}

	type struct2 struct{
	}

	attach the function which is going to be declared in the interface for both the struct types
	func (s1 struct1) interface_func(){
	}

	func (s2 struct2) interface_func(){
	}

	declare the interface
	type interface_name interface{
		interface_func()
	}

	now pass the objects of type struct1 and struct2 to function which takes interface_name type argument

	function is
	func call_interface(inf interface_name){
	}

	at the call point
	s1 := struct1{
		....
	}

	s2 := struct2{
		...
	}

	pass s1 and s2 to call_interface() function
	call_interface(s1)
	call_interface(s2)

	Now suppose we are trying to identify the type of object passed to a generic function
	How do we achieve that
	func generic_function(inf interface_name){
		switch inf.(type){
			case struct1:
				fmt.Println("yes we are processing struct1 %s\n",inf.(struct1).field1)
			case struct2:
				fmt.Println("yes we are processing struct2 %s\n",inf.(struct2).field1)
		}
	}

	Empty interface
	type interface_name interface{
	}
	anything can be put into it.

Anonymous func
	Anonymous does not have a identifier
	func main(){
		func(){
			fmt.Println("I am in a anonymous function")
		}()

		func(x int){
			fmt.Println("I am in a anonymous function with one argument", x)
		}(67)
	}

assigning a function to a variable
	f1 := func(){
		fmt.Println("I am getting executed from a variable")
	}
	f1()

	f2 := func(x string){
		fmt.Println("I am getting executed from a variable", x)
	}
	f2("Argument")

return a function from a function
	We are writing a function returning a function with no argument and returns int
	func outer_func() func() int{
		return func() int{
			return 200
		}
	}	
	call it as
	o := outer_func()
	o() will result to 200

	also can be called as
	outer_func()() will result to 200

callback
	func sum(x ...int) int{
		var total = 0
		for _, n := range x{
			total+=n
		}

		return total
	}

	func even(f func(...int) int, y ...int) []int{
		var z []int
		for _, n := range y{
			if n%2 == 0{
				z = append(z, n)
			}
		}
		return f(z)
	}

	var x int
	x = even(sum, 4,6,7,8,9,12)

pointers
	a :=32
	b := &a	//b stores the address of a
		//b is of type *int
	b	//prints the address of a
	*b	//prints the value 32
	
